//享元模式代码
public class HelloWorld {
	public static void main(String[] args) {
//		TextContentFactory factory = new HelloWorld.TextContentFactory();
		//static 指的就是不加载对象也能使用的方法和变量
		//若类池中有，则取类池中的类，没有则新建一个类
		TextContent textcontent1 = TextContentFactory.getTextContent("黄色的");
		System.out.println("黄色的"+textcontent1.getContent());
		TextContent textcontent2 = TextContentFactory.getTextContent("黄色的");
		System.out.println("黄色的"+textcontent2.getContent());
		TextContent textcontent3 = TextContentFactory.getTextContent("蓝色的");
		System.out.println("蓝色的"+textcontent3.getContent());
		TextContent textcontent4 = TextContentFactory.getTextContent("黄色的");
		System.out.println("黄色的"+textcontent4.getContent());
	}

	// 抽象享元角色
	interface TextContent {
		String getContent();
	}

	// 具体的享元类
	static class ConcreteTextContent implements TextContent {
		private String content;
		private String extrinsicState;// 用来区分不同的享元类

		public ConcreteTextContent(String content, String extrinsicState) {
			this.content = content;
			this.extrinsicState = extrinsicState;
		}

		@Override
		public String getContent() {
			return content;
		}

	}
	
	static private int x=0;

	/*
	 * 具体的享元工厂类 用于创建和管理享元类
	 */
	static class TextContentFactory {
		// 储存具体类
		private static Map<String, TextContent> pool = new HashMap<>();

		// 因为内部状态具备不变性，因此作为缓存的键
		public static TextContent getTextContent(String intrinsicState) {
			String content = "HelloWorld";
			// 判断是否在map中存在
			if (!pool.containsKey(intrinsicState)) {
				// 不存在则新建、加入
				
				//用于标记
				x++;
				content = content + x;
				
				TextContent textcontent = new ConcreteTextContent(content,
						intrinsicState);
				pool.put(intrinsicState, textcontent);
			}
			return pool.get(intrinsicState);
		}
	}

}
//原有的代码
// class Client {
// public static void main(String[] args) {
// IFlyweight flyweight1 = FlyweightFactory.getFlyweight("aa");
// IFlyweight flyweight2 = FlyweightFactory.getFlyweight("bb");
// flyweight1.operation("a");
// flyweight2.operation("b");
// }
//
// // 抽象享元角色
// interface IFlyweight {
// void operation(String extrinsicState);
// }
//
// // 具体享元角色
// static class ConcreteFlyweight implements IFlyweight {
// private String intrinsicState;
//
// public ConcreteFlyweight(String intrinsicState) {
// this.intrinsicState = intrinsicState;
// }
//
// @Override
// public void operation(String extrinsicState) {
// System.out.println("Object address: " + System.identityHashCode(this));
// System.out.println("IntrinsicState: " + this.intrinsicState);
// System.out.println("ExtrinsicState: " + extrinsicState);
// }
// }
//
// // 享元工厂
// static class FlyweightFactory {
// private static Map<String, IFlyweight> pool = new HashMap<>();
//
// // 因为内部状态具备不变性，因此作为缓存的键
// public static IFlyweight getFlyweight(String intrinsicState) {
// if (!pool.containsKey(intrinsicState)) {
// IFlyweight flyweight = new ConcreteFlyweight(intrinsicState);
// pool.put(intrinsicState, flyweight);
// }
// return pool.get(intrinsicState);
// }
// }
// }
